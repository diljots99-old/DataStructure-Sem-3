{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Courier New;}}
{\colortbl\red0\green0\blue0;\red255\green255\blue255;\red200\green200\blue200;\red0\green0\blue0;\red160\green160\blue160;\red190\green190\blue230;\red128\green128\blue255;\red0\green128\blue128;\red128\green0\blue0;\red240\green0\blue240;\red240\green200\blue240;\red0\green0\blue160;\red135\green135\blue200;\red0\green160\blue0;\red154\green200\blue154;\red190\green0\blue190;\red190\green137\blue190;\red0\green0\blue255;\red190\green190\blue255;\red224\green160\blue0;\red224\green206\blue159;\red132\green160\blue132;\red255\green0\blue0;\red255\green200\blue200;\red128\green255\blue255;\red64\green64\blue128;\red133\green133\blue172;}
{\info{\comment Generated by the Code::Blocks RTF Exporter plugin}
{\title Untitled}}

\deflang1033\pard\plain\f0\fs20   1  \cb3\cf4 /*Insertion Linked List*/
\par \cb1\cf0\ul0\i0\b0   2  \cb3\cf13 #include "stdio.h"
\par \cb1\cf0\ul0\i0\b0   3  \cb3\cf13 #include "conio.h"
\par \cb1\cf0\ul0\i0\b0   4  \cb3\cf13 #include "stdlib.h"
\par \cb1\cf0\ul0\i0\b0   5  
\par \cb1\cf0\ul0\i0\b0   6  \cb3\cf5 //Linked List is declared here
\par \cb1\cf0\ul0\i0\b0   7  \cb3\cf11\b struct \b0\cb1\cf0 node
\par \cb1\cf0\ul0\i0\b0   8  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0   9      \cb3\cf11\b int \b0\cb1\cf0 info\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  10      \cb3\cf11\b struct \b0\cb1\cf0 node \cb3\cf22 *\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  11  \cb3\cf22 \};
\par \cb1\cf0\ul0\i0\b0  12  \cb3\cf11\b struct \b0\cb1\cf0 node \cb3\cf22 *\cb1\cf0 first\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  13  
\par \cb1\cf0\ul0\i0\b0  14  \cb3\cf11\b void \b0\cb1\cf0 main\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0  15  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  16      \cb3\cf11\b int \b0\cb1\cf0 n\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  17      \cb3\cf11\b char \b0\cb1\cf0 ch\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  18      \cb3\cf11\b void \b0\cb1\cf0 create\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  19      \cb1\cf0 create\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  20      \cb3\cf11\b void \b0\cb1\cf0 print\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  21      \cb3\cf11\b void \b0\cb1\cf0 insertion\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 n\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  22      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nPress (Y/N) for printing linked list\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  23      \cb1\cf0 ch \cb3\cf22 =\cb1\cf0 getch\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  24      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'Y'\cb3\cf22 ||\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'y'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  25      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  26          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Your Linked List\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  27          \cb1\cf0 print\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  28          \cb1\cf0 ch\cb3\cf22 =\cb3\cf19 'n'\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  29      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  30      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nEnter The Location ="\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  31      \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 n\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  32      \cb1\cf0 insertion\cb3\cf22 (\cb1\cf0 n\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  33      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nPress (Y/N) for printing linked list\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  34      \cb1\cf0 ch \cb3\cf22 =\cb1\cf0 getch\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  35      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'Y'\cb3\cf22 ||\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'y'\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  36      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  37          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Your Linked List\\n"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  38          \cb1\cf0 print\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  39      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  40      \cb1\cf0 getch\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  41  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  42  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0  43  \cb3\cf4 create() function helps us to create Linked list
\par \cb1\cf0\ul0\i0\b0  44  \cb3\cf4 (of desired length) and insert data node by node
\par \cb1\cf0\ul0\i0\b0  45  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0  46  \cb3\cf11\b void \b0\cb1\cf0 create\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0  47  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  48      \cb3\cf11\b struct \b0\cb1\cf0 node \cb3\cf22 *\cb1\cf0 ptr\cb3\cf22 ,*\cb1\cf0 cpt\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  49      \cb3\cf11\b char \b0\cb1\cf0 ch\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  50      \cb1\cf0 ptr \cb3\cf22 =(\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 *) \cb1\cf0 malloc \cb3\cf22 (\cb3\cf11\b sizeof \b0\cb3\cf22 (\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0  51      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Input First Node information = "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  52      \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  53      \cb1\cf0 first\cb3\cf22 =\cb1\cf0 ptr\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  54      \cb3\cf11\b do
\par \cb1\cf0\ul0\i0\b0  55      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  56          \cb1\cf0 cpt\cb3\cf22 =(\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof \b0\cb3\cf22 (\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0  57          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nInput next node information = "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  58          \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 cpt\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  59          \cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 link \cb3\cf22 =\cb1\cf0 cpt\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  60          \cb1\cf0 ptr \cb3\cf22 = \cb1\cf0 cpt\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  61          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "Press (Y/N) for more node "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  62          \cb1\cf0 ch \cb3\cf22 =\cb1\cf0 getch\cb3\cf22 ();
\par \cb1\cf0\ul0\i0\b0  63      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  64      \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'Y'\cb3\cf22 ||\cb1\cf0 ch\cb3\cf22 ==\cb3\cf19 'y'\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  65      \cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 link \cb3\cf22 = \cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  66  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  67  \cb3\cf4 /*
\par \cb1\cf0\ul0\i0\b0  68  \cb3\cf4 print() function helps us in traversing the
\par \cb1\cf0\ul0\i0\b0  69  \cb3\cf4 linked list and printing the data in it
\par \cb1\cf0\ul0\i0\b0  70  \cb3\cf4 */
\par \cb1\cf0\ul0\i0\b0  71  \cb3\cf11\b void \b0\cb1\cf0 print\cb3\cf22 ()
\par \cb1\cf0\ul0\i0\b0  72  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  73      \cb3\cf11\b struct \b0\cb1\cf0 node \cb3\cf22 *\cb1\cf0 ptr\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  74      \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\n%d "\cb3\cf22 ,\cb1\cf0 first\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  75      \cb1\cf0 ptr\cb3\cf22 =\cb1\cf0 first\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  76      \cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 ptr\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  77      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  78          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "%d "\cb3\cf22 ,\cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  79          \cb1\cf0 ptr\cb3\cf22 =\cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  80      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  81  \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  82  
\par \cb1\cf0\ul0\i0\b0  83  \cb3\cf11\b void \b0\cb1\cf0 insertion\cb3\cf22 (\cb3\cf11\b int \b0\cb1\cf0 n\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0  84  \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  85      \cb3\cf11\b struct \b0\cb1\cf0 node \cb3\cf22 *\cb1\cf0 ptr\cb3\cf22 ,*\cb1\cf0 cpt\cb3\cf22 ,*\cb1\cf0 NEW\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  86      \cb1\cf0 ptr\cb3\cf22 =\cb1\cf0 first\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  87      \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 n\cb3\cf22 ==\cb3\cf9 1\cb3\cf22 )\cb3\cf5 //insert as First Node
\par \cb1\cf0\ul0\i0\b0  88      \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0  89          \cb1\cf0 NEW\cb3\cf22 =(\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof \b0\cb3\cf22 (\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0  90          \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nInput next node information = "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  91          \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0  92          \cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 =\cb1\cf0 first\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  93          \cb1\cf0 first\cb3\cf22 =\cb1\cf0 NEW\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  94      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0  95      \cb3\cf11\b else
\par \cb1\cf0\ul0\i0\b0  96      \cb3\cf22 \{    \cb3\cf11\b int \b0\cb1\cf0 i\cb3\cf22 =\cb3\cf9 2\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  97           \cb1\cf0 cpt\cb3\cf22 =\cb1\cf0 first\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  98           \cb1\cf0 ptr\cb3\cf22 =\cb1\cf0 first\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0  99           \cb3\cf11\b do
\par \cb1\cf0\ul0\i0\b0 100           \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 101              \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 n\cb3\cf22 ==\cb1\cf0 i\cb3\cf22 )\cb3\cf5 //Insert after Given Node
\par \cb1\cf0\ul0\i0\b0 102              \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 103                  \cb1\cf0 NEW\cb3\cf22 =(\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof \b0\cb3\cf22 (\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0 104                  \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nInput next node information = "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 105                  \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 106                  \cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 =\cb1\cf0 ptr\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 107                  \cb1\cf0 cpt\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 =\cb1\cf0 NEW\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 108              \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 109              \cb1\cf0 cpt\cb3\cf22 =\cb1\cf0 cpt\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 110              \cb1\cf0 ptr\cb3\cf22 =\cb1\cf0 ptr\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 111              \cb1\cf0 i\cb3\cf22 ++;
\par \cb1\cf0\ul0\i0\b0 112           \cb3\cf22 \}\cb3\cf11\b while\b0\cb3\cf22 (\cb1\cf0 ptr\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 113          \cb3\cf11\b if\b0\cb3\cf22 (\cb1\cf0 n\cb3\cf22 ==\cb1\cf0 i\cb3\cf22 )\cb3\cf5 //Insert as Last Node
\par \cb1\cf0\ul0\i0\b0 114          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 115                  \cb1\cf0 NEW\cb3\cf22 =(\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 *) \cb1\cf0 malloc\cb3\cf22 (\cb3\cf11\b sizeof \b0\cb3\cf22 (\cb3\cf11\b struct \b0\cb1\cf0 node\cb3\cf22 ));
\par \cb1\cf0\ul0\i0\b0 116                  \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nInput next node information = "\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 117                  \cb1\cf0 scanf\cb3\cf22 (\cb3\cf17 "%d"\cb3\cf22 ,&\cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 info\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 118                  \cb1\cf0 cpt\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 =\cb1\cf0 NEW\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 119                  \cb1\cf0 NEW\cb3\cf22 ->\cb1\cf0 link\cb3\cf22 =\cb1\cf0 NULL\cb3\cf22 ;
\par \cb1\cf0\ul0\i0\b0 120          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 121          \cb3\cf11\b else if\b0\cb3\cf22 (\cb1\cf0 n\cb3\cf22 >\cb1\cf0 i\cb3\cf22 )
\par \cb1\cf0\ul0\i0\b0 122          \cb3\cf22 \{
\par \cb1\cf0\ul0\i0\b0 123              \cb1\cf0 printf\cb3\cf22 (\cb3\cf17 "\\nEnter Location carefully"\cb3\cf22 );
\par \cb1\cf0\ul0\i0\b0 124          \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 125      \cb3\cf22 \}
\par \cb1\cf0\ul0\i0\b0 126  \cb3\cf22 \}
\par }